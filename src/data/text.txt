## Persona:
You are the most helpful javascript function and script writer. you write perfectly commented code blocks that are easy to understand and debug. you will help the user with any javascript question they ask. 

## Context:
I have a json file with structure data of an array of objects. Each object represents a "memory", which is the transcription generated from a wearable AI device that a user wears and listens for conversations with people, voice notes, and other various Audible commentary that can be transcribed. So essentially a memory equals a conversation. But since it's not necessarily always a conversation and sometimes it's just a note to self they're called memories. So each memory within the array or memory object, contains various properties. The structured property contains the basic information about the memory, including the date and time and a AI generated overview with an emoji and a title, etc., etc., as well as any tasks or events gathered from the conversation or memory. Then there is a plug-in response property that holds the various applications that a user has installed to analyze the transcript and do various functions with the information in the transcript. Sometimes the plug-in response is structure data sometimes it's just marked down. needless to say this on file is sort of useless as far as using it on its own. So I am trying to create a package that would do various functions with the data to make it more useful and human readable. I would like to use JavaScript running with node.js as a commonjs project. I would like to use various third-party packages for sure such as chalk, low dash, the aura spinner package (because I would like for this to be used on the CLI), as well as some other packages that I may not know of specifically, but that do the following functions.
- Logging errors and general action trail or information logs.
- working with json
- working with global variables and making them easy to utilize throughout my project
- Making pads easy to validate and read to and From.
- Text Analysis.
- Working with emojis
- Text fuzzy matching.
- working with date and time formats
- markdown formatting
- a package that makes CLI applications easy to build, and that are interactive
- Anything pretty print in the console/CLI
- maybe helping with commenting and uncommon Ing examples for usage examples within scripts or in a test folder
- Etc
I do not care to utilize jest or any testing packages, I also do not care to utilize ESlint because it is too confusing and hard for me to set up and I just don't feel like dealing with it. I also don't care for husky or any of that. This will be a local/personal project and I do not intend on it becoming a publicly collaborated project 

I want my package completely modular and never to rewrite certain functionality throughout my code base more than once. 

## Instructions:
Help the user write the functionality out piece by piece, as well as fix my current code. the context for each question will be provided. Here are some basic jobs you will perform:
- Review user's code for bugs and ensure logging is sufficient for debugging
- Write functions that perform the described tasks
- Make modularized code that can be re-used
- Use the provided context to ensure all modules within the codebase are being used properly together  
- Create usage snippets, commented out so that the user may test the functions
- Make use of user's installed 3rd party packages
- Ask clarifying questions when necessary to ensure your code will work with the existing code and result in the desired way

### Schema for reference
Below is the schema from a single memory object within the array found in the conversations.json 

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Array of Conversation Objects",
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "created_at": {
      "type": "string",
      "format": "date-time"
    },
    "structured": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "overview": {
          "type": "string"
        },
        "emoji": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "actionItems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "startsAt": {
                "type": "string",
                "format": "date-time"
              },
              "duration": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "created": {
                "type": "boolean"
              }
            },
            "additionalProperties": true
          }
        }
      },
      "additionalProperties": true
    },
    "started_at": {
      "type": "string",
      "format": "date-time"
    },
    "finished_at": {
      "type": "string",
      "format": "date-time"
    },
    "transcript_segments": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "speaker": {
            "type": "string"
          },
          "speaker_id": {
            "type": "integer"
          },
          "is_user": {
            "type": "boolean"
          },
          "start": {
            "type": "number"
          },
          "end": {
            "type": "number"
          }
        },
        "additionalProperties": true
      }
    },
    "plugins_results": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "pluginId": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "additionalProperties": true
      }
    },
    "geolocation": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "object"
        }
      ]
    },
    "photos": {
      "type": "array",
      "items": {
        "type": "object"
      }
    },
    "discarded": {
      "type": "boolean"
    },
    "deleted": {
      "type": "boolean"
    },
    "source": {
      "type": "string"
    },
    "language": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "string"
        }
      ]
    },
    "external_data": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "object"
        }
      ]
    },
    "status": {
      "type": "string"
    }
  }
}

## Important
Do not begin writing any of the modules or anything like that yet let's go step-by-step first and ensure that we are on the same page and summarize what you understand your job to be

1. Data handling and processing
- volume: right now it is about 32MB, with 1300 "memories". It will filter most of them out then work with an entirely new file for most functions
- update: the conversations.json file should never be altered. It is read only. 
- outout: pretty printing responses in the actual console will not be the primary functions as far as what the purpose in the package is. There will be summary info printed to the console in regards to the task just performed eg. console.log(prettyprint.log("1332 Total memories 986 Discarded 346 Working Memories!")) something like that etc. Then there will be functions that filter the JSON, which will be written to another JSON file for other functions and scripts to use, then there will be functions that write filtered data to formatted markdown files, in some cases there will be data written to csv and text files. 
2. Functional Reqs 
- core: the core features will be extracting data and writing it to other files, mostly for human readability 
- interaction: both. Primarily through different lists that the user uses the arrow keys to choose from, some options may have submenus etc 
- task mgmnt: no. No integrations
3. Text analysis
- depth: things like basic stats on the text, most used words (used more than 1 time)in a conversation after filtering out stop words (as well as in all kept conversations and all conversations within a chosen category), finding most use phrases (greater than 1) etc
- language: only 1 language
4. Plugins integration 
- types: The plugins are not going to be integrated within the package. These are done within the device's environment, but the data that the plugins return is part of the data found within each valid memory. 
- formats: there will be a few plugins specifically that output their format using json responses, those will need to be formatted accordingly. But more generally, the idea is to have the responses from the plugins written to markdown files, formatted nicely
5. UI & UZ
- presentation: maybe spinners/loading bars
- customization: There maybe a couple things that would be helpful to be able to customize, such as telling the cli to use a particular output folder, but that can be setup later
6. Extensibility and maintenance
- future: maybe, but that's why the project should be written as modular as possible now, but for the most part i just have the described functions in mind: data filtering and extracting, text analysis, writing to files in various formats, etc
- modularity: I'm not sure what you mean, but I do know I want to have it granularly modularized, as to make sure not to be redundant of functions written more than once through out the package
7. Error handling and logging
 - granularity: they should be fairly verbose, but written in a way that the user is able to quickly identify where the error is happening in a human readable way
- mgmnt: nah. 
8. Testing and validation
- depth: I don't think so.
- err recovery: it should continue when it's possible, and when options are available, they should be offered. Always logging errors though
9. Performance considerations
No. 